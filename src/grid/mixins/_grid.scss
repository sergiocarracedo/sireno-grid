@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    padding-right: ($gutter / 2);
    padding-left: ($gutter / 2);
  }

  @each $breakpoint, $min in $breakpoints {
    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @extend %grid-column;
        @media (min-width: $min) {
          width: (100% / $grid-columns * $i);

          @supports (display: grid) {
            width: auto;
            grid-column: span #{$i};
          }
        }
      }

      .col-#{$breakpoint}-order-#{$i} {
        @media (min-width: $min) {
          order: #{$i};
        }
      }

      .col-#{$breakpoint}-end-#{$i} {
        @media (min-width: $min) {
          grid-column-end: #{$i + 1};
        }
      }




    }
  }
}
@mixin make-grid-fillers($breakpoints: $grid-breakpoints) {
  .grid-filler {
    display: flex;
    flex-flow: row wrap;

    @supports (display: grid) {
      display: grid;
      justify-items: stretch;
    }

    .grid-filler-container {
      width: 100%;
      margin: auto;

      > .grid-row {
        width: 100%;
        margin: 0;
        @media (max-width: map-get($grid-breakpoints, sm) - 1) {
          padding: 0 5px;
        }
      }
    }
  }

  .grid-col-filler {
    flex: 1;
    width: auto;
    min-width: 0;
  }

  @include make-grid-filler-size(1440);
  @include make-grid-filler-size(1240);
  @include make-grid-filler-size(1140);
}

@mixin make-grid-filler-size($width) {
  .grid-filler-#{$width} {
    @supports (display: grid) {
      grid-template-columns: auto minmax(0, #{$width}px) auto;
    }
    .grid-filler-container {
      max-width: #{$width}px;
    }
  }
}

@mixin make-margins() {
  @for $i from 1 through 10 {
    .mb-#{$i} {
      margin-bottom: #{$i*10}px
    }
    .mt-#{$i} {
      margin-top: #{$i*10}px
    }
  }
}
